{"version":3,"sources":["../src/VueLocale.js"],"names":["Intl","NumberFormat","IntlPolyfill","DateTimeFormat","formats","getCachedNumberFormat","getCachedDateTimeFormat","getCachedMessageFormat","getCachedRelativeFormat","maximumFractionDigits","install","Vue","options","language","currency","messages","locale","changeLocale","formatDate","date","format","parsedDate","Date","TypeError","formatTime","time","formatNumber","num","style","number","formatRelative","now","formatMessage","message","formatOptions","length","decimalTestNumber","decimalSeparator","charAt","extractNumberParts","value","parsed","parseInt","replace","isNaN","parseToNumber","splits","split","map","parseFloat","helpers","helper","name","filter","prototype","directive","id","expression","el","innerHTML","component","template","props","msg","type","String","required","computed","translated","read","val","numberOptions","minimumFractionDigits","write","fractionDigits","plugin"],"mappings":"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","file":"VueLocale.js","sourcesContent":["/*\n===========================================================================\n    Copyright 2015-2016 Sebastian Software GmbH, Germany\n    Licensed under Apache-2.0\n===========================================================================\n*/\n\nimport IntlMessageFormat from \"intl-messageformat\"\nimport IntlRelativeFormat from \"intl-relativeformat\"\nimport areLocalesSupported from \"intl-locales-supported\"\n\nimport createFormatCache from \"intl-format-cache\"\n\nimport { kebabCase, isPlainObject, isString, isNumber, isDate, each, clamp } from \"lodash\"\n\n// Be sure to import the Polyfill\n// TODO: Figure out if there is a ES2015 way to conditional load this\nimport \"intl\"\n\n// NodeJS by default to not offer full ICU support and therefor break the unit tests\nif (!areLocalesSupported([ \"en\", \"de\", \"fr\", \"es\" ]))\n{\n  /* global IntlPolyfill */\n  Intl.NumberFormat = IntlPolyfill.NumberFormat\n  Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat\n}\n\nconst formats = IntlMessageFormat.formats\n\nconst getCachedNumberFormat = createFormatCache(Intl.NumberFormat)\nconst getCachedDateTimeFormat = createFormatCache(Intl.DateTimeFormat)\nconst getCachedMessageFormat = createFormatCache(IntlMessageFormat)\nconst getCachedRelativeFormat = createFormatCache(IntlRelativeFormat)\n\n// A constant defined by the standard Intl.NumberFormat\n// const maximumFractionDigits = 20;\n// Unfortunately through formatting issues of percent values in IE\n// we have to use a small value here, because IE (as of v11) seems to\n// account the percent symbol + optional space to the fraction digits.\n// See also: https://github.com/sebastian-software/vue-locale/issues/1#issuecomment-215396481\nconst maximumFractionDigits = 18;\n\n\nfunction install(Vue, options)\n{\n  var { language, currency, messages } = options\n  var locale = language\n\n  function changeLocale(language)\n  {\n    locale = language\n  }\n\n  // =============================================\n  //   FORMATTER FUNCTIONS\n  // =============================================\n\n  function formatDate(date, format)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(parsedDate))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatDate}}\")\n\n    if (isString(format) && format in formats.date)\n      format = formats.date[format]\n\n    return getCachedDateTimeFormat(locale, format).format(parsedDate)\n  }\n\n  function formatTime(date, format)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(date))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatTime}}\")\n\n    if (isString(format) && format in formats.time)\n      format = formats.time[format]\n\n    return getCachedDateTimeFormat(locale, format).format(parsedDate)\n  }\n\n  function formatNumber(num, format)\n  {\n    if (!isNumber(num))\n      throw new TypeError(\"A number must be provided to {{formatNumber}}\")\n\n    if (isString(format))\n    {\n      if (format === \"currency\")\n        format = { style: \"currency\", currency: currency }\n      else if (format in formats.number)\n        format = formats.number[format]\n    }\n\n    return getCachedNumberFormat(locale, format).format(num)\n  }\n\n  function formatRelative(date, format, now)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(parsedDate))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatRelative}}\")\n\n    return getCachedRelativeFormat(locale, format).format(parsedDate, {\n      now: now || new Date()\n    })\n  }\n\n  function formatMessage(message, ...formatOptions)\n  {\n    // Read real message from DB\n    if (message in messages)\n      message = messages[message]\n\n    if (typeof message === \"string\")\n      message = getCachedMessageFormat(message, locale, {})\n\n    // If there is a single map parameter, use that instead of the formatOptions array\n    if (formatOptions.length === 1 && isPlainObject(formatOptions[0]))\n      formatOptions = formatOptions[0]\n\n    return message.format(formatOptions)\n  }\n\n\n\n  // =============================================\n  //   PARSERS\n  // =============================================\n\n  // Figuring out whether the separator is either \",\" or \".\" (Are there any other possibilities at all?)\n  var decimalTestNumber = 3.1\n  var decimalSeparator = formatNumber(decimalTestNumber).charAt(1)\n\n  function extractNumberParts(value)\n  {\n    var parsed = parseInt(value.replace(/[^0-9]/g, \"\"), 0)\n    return isNaN(parsed) ? 0 : parsed\n  }\n\n  function parseToNumber(value)\n  {\n    if (value == null || value === \"\")\n      return 0\n\n    var splits = value.split(decimalSeparator).map(extractNumberParts)\n\n    // Build up float number to let parseFloat convert it back into a number\n    if (splits[1] > 0)\n      return parseFloat(splits[0] + \".\" + splits[1])\n\n    // Return plain integer\n    return splits[0]\n  }\n\n\n\n\n\n  // =============================================\n  //   REGISTER FILTERS\n  // =============================================\n\n  var helpers =\n  {\n    formatDate,\n    formatTime,\n    formatRelative,\n    formatNumber,\n    formatMessage\n  }\n\n  each(helpers, function(helper, name)\n  {\n    // Adding features as a VueJS filter for easily pass a string over (only numberic parameters though)\n    Vue.filter(kebabCase(name), helper)\n\n    // Support alternative full blown calling of methods with real options object\n    Vue.prototype[\"$\" + name] = helper\n  })\n\n  Vue.directive(\"i18n\", function(id)\n  {\n    /* eslint no-invalid-this: 0 */\n    if (id == null || isNaN(id))\n      id = this.expression\n\n    this.el.innerHTML = formatMessage(id)\n  })\n\n  Vue.component(\"text\",\n  {\n    template: '<span class=\"text\">{{{ translated }}}</span>',\n    props: {\n      msg: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      translated: function(...formatOptions) {\n        return formatMessage(this.msg, ...formatOptions);\n      }\n    }\n  })\n\n\n\n\n  // =============================================\n  //   ADDITIONAL FILTERS\n  // =============================================\n\n  // Via: http://jsfiddle.net/6jjuoypf/2/\n  Vue.filter(\"format-currency\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val)\n    {\n      var numberOptions =\n      {\n        style: \"currency\",\n        currency: currency,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }\n\n      return formatNumber(val == null || val === \"\" || isNaN(val) ? 0 : val, numberOptions)\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-currency-precise\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val) {\n      return formatNumber(val == null || val === \"\" || isNaN(val) ? 0 : val, \"currency\")\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-percent\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val, fractionDigits)\n    {\n      return formatNumber(val == null || val === \"\" ? 0 : clamp(val / 100, 0, 1),\n      {\n        style: \"percent\",\n        minimumFractionDigits: fractionDigits == null ? 0 : fractionDigits,\n        maximumFractionDigits: fractionDigits == null ? maximumFractionDigits : fractionDigits\n      })\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-number\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val, fractionDigits)\n    {\n      return val == null || val === \"\" ? 0 : formatNumber(val,\n      {\n        minimumFractionDigits: fractionDigits == null ? 0 : fractionDigits,\n        maximumFractionDigits: fractionDigits == null ? maximumFractionDigits : fractionDigits\n      })\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n}\n\nvar plugin = {\n  install\n}\n\nexport default plugin\n"]}